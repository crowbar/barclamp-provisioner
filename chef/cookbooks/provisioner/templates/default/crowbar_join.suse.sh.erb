#!/bin/bash
# Copyright 2011, Dell
# Copyright 2012, SUSE Linux Products GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

if [[ ! -d /var/log/crowbar/crowbar_join ]] ; then
  mkdir -p /var/log/crowbar/crowbar_join/
fi

echo "======== Running $0 $* ($(date '+%F %T %z')) ========" >>/var/log/crowbar/crowbar_join/errlog
exec 2>>/var/log/crowbar/crowbar_join/errlog

export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
set -x


################## Functions ##################

echo_error() {
    # Not to fd2 because this would go to the file
    echo $*
}

echo_verbose() {
    [ "$VERBOSE" -ne 0 ] && echo $*
}

echo_debug() {
    [ "$DEBUG" -ne 0 ] && echo $*
}

# Run a command and log its output.
log_to() {
    # $1 = install log to log to
    # $@ = rest of args
    local __log="/var/log/crowbar/crowbar_join/$1"
    local __timestamp="$(date '+%F %T %z')"
    shift
    printf "\n%s\n" "$__timestamp: Running $*" | \
	tee -a "$__log.err" >> "$__log.log"
    local _ret=0
    if "$@" 2>> "$__log.err" >>"$__log.log"; then
	_ret=0
    else
	_ret="$?"
	echo_error "$__timestamp: $* failed."
	echo_error "See $__log.log and $__log.err for more information."
    fi
    printf "\n$s\n--------\n"  "$(date '+%F %T %z'): Done $*" | \
	tee -a "$__log.err" >> "$__log.log"
    return $_ret
}

post_state() {
  local curlargs=(-o "/var/log/crowbar/$1-$2.json" --connect-timeout 60 -s \
      -L -X POST --data-binary "{ \"name\": \"$1\", \"state\": \"$2\" }" \
      -H "Accept: application/json" -H "Content-Type: application/json" \
      --max-time 240)
  [[ $CROWBAR_KEY ]] && curlargs+=(-u "$CROWBAR_KEY" --digest --anyauth)
  oldumask=`umask`
  umask 077
  curl "${curlargs[@]}" "http://$IP:3000/crowbar/crowbar/1.0/transition/default"
  umask $oldumask
}

wait_for_network() {
    # Spin while we wait for the interface to come up.
    while ! ip addr | grep -v " lo" | grep -q "inet "
    do
      sleep 1
    done
}

wait_for_hostname() {
    # wait for hostname to become available
    tries_left=120
    while ! hostname -f > /dev/null; do
      HOSTNAME=$(hostname -f)
      exit_code=$?

      echo_debug $HOSTNAME
      echo_debug $exit_code
      if [ $exit_code -eq 0 ]; then
        break
      fi

      echo_debug "sleeping 5 seconds"
      sleep 5

      tries_left=$(($tries_left-1))
      if [ $tries_left -eq 0 ]; then
        return 1
      fi

    done

    return 0
}

sync_time() {
    # Warning! Newer sntp releases use different options (e.g. the one
    # on openSUSE 12.1
    while ! sntp -P no -r $IP; do
	echo_verbose "Waiting for NTP server"
	sleep 1
    done
}

do_setup() {
    mkdir -p /etc/chef
    curl -o /etc/chef/validation.pem \
        "http://$HTTP_SERVER/validation.pem"

    # Make sure that the client knows how to talk to the server.
    # "http://chef.example.com:4000" is part of the default config; if it's there,
    # we can overwrite it
    grep -q '^\s*chef_server_url\s*"http://chef.example.com:4000"' /etc/chef/client.rb 2> /dev/null
    if [[ $? -eq 0 || ! -f /etc/chef/client.rb ]]; then
        test -f /etc/chef/client.rb && mv /etc/chef/client.rb /etc/chef/client.rb.bak
        echo "chef_server_url \"http://$IP:4000\"" >/etc/chef/client.rb

        # add reboot handler to chef-client
        # FIXME: there is a cleaner way of adding handlers:
        # http://wiki.opscode.com/display/chef/Opscode+LWRP+Resources#OpscodeLWRPResources-chefhandler

        cat >> /etc/chef/client.rb <<EOF
require "/var/chef/handlers/reboot_handler"
reboot_handler = RebootHandler.new
report_handlers << reboot_handler # these fire at the end of a successful run
EOF

    fi # edit /etc/chef/client.rb

    # create reboot handler
    if [ ! -f /var/chef/handlers/reboot_handler.rb ]; then
        mkdir -p /var/chef/handlers
        cat > /var/chef/handlers/reboot_handler.rb <<EOF
class RebootHandler < Chef::Handler
  def report
    if node.run_state[:reboot]
      Chef::Log.info("Reboot requested through node.run_state[:reboot]")
      system("/sbin/reboot")
    end
  end
end
EOF
    fi # create reboot handler

    # install Chef
    if [[ ! -x /etc/init.d/chef-client ]]; then
        echo_verbose "Installing Chef..."

        while ! log_to zypper zypper -n refresh ; do
            echo_verbose "Failed to do zypper refresh, wait and try again"
            sleep 10
        done
        while ! log_to zypper zypper -n install rubygem-chef ; do
            echo_verbose "Failed to do zypper install, wait and try again"
            sleep 10
        done

        log_to chef chkconfig -a chef-client
    fi # install chef
}

do_chef_client_after_setup() {
    # Until we arrange for the network to transisiton from using
    # DHCP somewhere else, the first run of chef-client will always die due to
    # the networking barclamp changing the IP address from dhcp to static.
    # We will try to pick up and run with it.
    echo_verbose "Running Chef Client (after setup)"
    log_to chef chef-client $CHEF_CLIENT_OPTIONS

    # Make sure our interfaces are as up as we can get them
    echo_verbose "Ensuring that our network interfaces are up."
    log_to ifup /sbin/service network restart
}

do_chef_client() {
    # Note that we only transition to problem state if the second run fails.
    echo_verbose "Running Chef Client (pass 1)"
    if ! log_to chef chef-client $CHEF_CLIENT_OPTIONS; then
        log_to ifup /sbin/service network restart
        post_state $HOSTNAME "recovering"
        echo_debug "Error Path"
        echo_debug "Syncing Time"
        sync_time
        echo_debug "Removing Chef Cache"
        rm -rf /var/cache/chef/*
        echo_verbose "Running Chef Client (pass 2) - cache cleanup"
        if ! log_to chef chef-client $CHEF_CLIENT_OPTIONS; then
            log_to ifup /sbin/service network restart
            echo_debug "Error Path"
            echo_debug "Syncing Time"
            sync_time
            echo_debug "Removing Chef Cache"
            rm -rf /var/cache/chef/*
            echo_debug "Checking Keys"
            rm -f /etc/chef/client.pem
            post_state $HOSTNAME "installed"
            echo_verbose "Running Chef Client (pass 3) - password cleanup"
            if ! log_to chef chef-client $CHEF_CLIENT_OPTIONS; then
                log_to ifup /sbin/service network restart
                echo_error "chef-client run failed too many times, giving up."
                printf "Our IP address is: %s\n" "$(ip addr show)" >&2
                final_state="problem"
            else
                post_state "$HOSTNAME" "$final_state"
                log_to chef chef-client $CHEF_CLIENT_OPTIONS
            fi
        fi
    fi
}


################## Option handling ##################

SCRIPT=`basename $0`

usage() {
    echo "$SCRIPT -- Synchronize with Crowbar administration server"
    echo ""
    echo "Usage:"
    echo "$SCRIPT [--setup|--start|--stop] [--debug] [--verbose]"
}

ARGS=`getopt -o "hdv:" -l "help,setup,start,stop,debug,verbose" -n "$SCRIPT" -- "$@"`
if test $? -ne 0; then
   usage
   exit 1
fi

eval set -- "$ARGS"

MODE=
DEBUG=0
VERBOSE=0

while true; do
    case "$1" in
        --)
            break
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --setup)
            if test -n "$MODE"; then
                echo_error "Error: more than one mode specified."
                exit 1
            fi
            MODE="setup"
            shift
            ;;
        --start)
            if test -n "$MODE"; then
                echo_error "Error: more than one mode specified."
                exit 1
            fi
            MODE="start"
            shift
            ;;
        --stop)
            if test -n "$MODE"; then
                echo_error "Error: more than one mode specified."
                exit 1
            fi
            MODE="stop"
            shift
            ;;
        -d|--debug)
            DEBUG=1
            shift
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
    esac
done

if test -z "$MODE"; then
    echo_error "Error: no mode specified."
    exit 1
fi

if test "$MODE" != "setup" -a "$MODE" != "start" -a "$MODE" != "stop"; then
    echo_error "Error: invalide mode $MODE."
    exit 1
fi

################## Core ##################

EXVAL=0

# This is required if the autoyast.xml had any <media_url> elements
# containing credentials; if so, they get cached in
# /root/.zypp/credentials.cat and so subsequent zypper runs need HOME
# set in order to reuse them.
export HOME=/root

IP="<%= @admin_ip %>"
HTTP_SERVER="<%= @admin_ip %>:8091"

if [[ -f /etc/crowbar.install.key ]]; then
    export CROWBAR_KEY="$(cat /etc/crowbar.install.key)"
fi

CHEF_CLIENT_OPTIONS=
if [ "$DEBUG" -ne 0 ]; then
    CHEF_CLIENT_OPTIONS="-l debug"
fi

if [ "$MODE" == "setup" -o "$MODE" == "start" ]; then
    echo_verbose "Waiting on our network interface to come up..."
    wait_for_network

    ping -q -c1 $IP > /dev/null
    if [ $? -ne 0 -a "$MODE" == "start" ]; then
        echo_error "Cannot ping $IP..."
        exit 1
    fi

    echo_verbose "Getting hostname..."
    if ! wait_for_hostname; then
        echo_error "Cannot get hostname..."
        exit 1
    fi

    # Get our hostname
    HOSTNAME=$(hostname -f)

    # stop ntpd before we run ntpdate, and start it again afterwards.
    NTP_START=0
    if service ntp status > /dev/null; then
        log_to time service ntp stop
        NTP_START=1
    fi

    echo_verbose "Synchronizing time (pass 1)"
    sync_time

    # Mark us as readying, and get our cert.
    post_state $HOSTNAME "readying"
    final_state="ready"

    [ "$MODE" == "setup" ] && do_setup

    # Run Chef
    echo_verbose "Syncing time (pass 2)"
    sync_time

    [ "$MODE" == "setup" ] && do_chef_client_after_setup
    do_chef_client

    # Transition to our final state
    post_state $HOSTNAME "$final_state"

    # make sure to keep hostname
    [ "$MODE" == "setup" ] && echo $HOSTNAME > /etc/HOSTNAME

    [ $NTP_START -eq 1 ] && log_to time service ntp start
    [ "$MODE" == "setup" ] && log_to chef service chef-client start

    [ $final_state == "ready" ] || EXVAL=1
elif [ "$MODE" == "stop" ]; then
    RUNLEVEL=$(runlevel | awk '{print $2}')
    final_state="shutdown"
    [ "$RUNLEVEL" == "6" ] && final_state="reboot"

    echo_debug "Stopping with state=$final_state (runlevel $RUNLEVEL)"

    HOSTNAME=$(hostname -f)
    post_state $HOSTNAME "$final_state"
fi # mode

echo_verbose "Done"

exit $EXVAL
