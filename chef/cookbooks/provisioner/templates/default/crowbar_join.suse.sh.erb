#!/bin/bash
# Copyright 2011, Dell
# Copyright 2012, SUSE Linux Products GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This is required if the autoyast.xml had any <media_url> elements
# containing credentials; if so, they get cached in
# /root/.zypp/credentials.cat and so subsequent zypper runs need HOME
# set in order to reuse them.
export HOME=/root

HTTP_SERVER="<%= @admin_ip %>:8091"
IP=${HTTP_SERVER%:*}

if [[ ! -d /var/log/crowbar/crowbar_join ]] ; then
  mkdir -p /var/log/crowbar/crowbar_join/
fi

exec 2>>/var/log/crowbar/crowbar_join/errlog

export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
set -x

if [[ ! -d /var/log/chef/ ]]; then
    mkdir -p /var/log/chef/
fi

if [[ -f /etc/crowbar.install.key ]]; then
    export CROWBAR_KEY="$(cat /etc/crowbar.install.key)"
fi

# Run a command and log its output.
log_to() {
    # $1 = install log to log to
    # $@ = rest of args
    local __log="/var/log/crowbar/crowbar_join/$1"
    local __timestamp="$(date '+%F %T %z')"
    shift
    printf "\n%s\n" "$__timestamp: Running $*" | \
	tee -a "$__log.err" >> "$__log.log"
    local _ret=0
    if "$@" 2>> "$__log.err" >>"$__log.log"; then
	_ret=0
    else
	_ret="$?"
	echo "$__timestamp: $* failed."
	echo "See $__log.log and $__log.err for more information."
    fi
    printf "\n$s\n--------\n"  "$(date '+%F %T %z'): Done $*" | \
	tee -a "$__log.err" >> "$__log.log"
    return $_ret
}

post_state() {
  local curlargs=(-o "/var/log/crowbar/$1-$2.json" --connect-timeout 60 -s \
      -L -X POST --data-binary "{ \"name\": \"$1\", \"state\": \"$2\" }" \
      -H "Accept: application/json" -H "Content-Type: application/json" \
      --max-time 240)
  [[ $CROWBAR_KEY ]] && curlargs+=(-u "$CROWBAR_KEY" --digest --anyauth)
  oldumask=`umask`
  umask 077
  curl "${curlargs[@]}" "http://$IP:3000/crowbar/crowbar/1.0/transition/default"
  umask $oldumask
}

# Spin while we wait for the interface to come up.
echo "Waiting on our network interface to come up..."
while ! ip addr | grep -v " lo" | grep -q "inet "
do
  sleep 1
done

# wait for hostname to become available
tries_left=120
while ! hostname -f > /dev/null; do
  HOSTNAME=$(hostname -f)
  exit_code=$?

  echo $HOSTNAME
  echo $exit_code
  if [ $exit_code -eq 0 ]; then
    break
  fi

  echo "sleeping 5 seconds"
  sleep 5

  tries_left=$(($tries_left-1))
  if [ $tries_left -eq 0 ]; then
    echo "giving up... reboot"
    reboot
    exit 1
  fi

done

# Get our hostname
HOSTNAME=$(hostname -f)

sync_time() {
    # stop ntpd before we run ntpdate, and start it again afterwards.
    service ntp stop
    # Warning! Newer sntp releases use different options (e.g. the one
    # on openSUSE 12.1
    while ! sntp -P no -r $IP; do
	echo "Waiting for NTP server"
	sleep 1
    done
}

echo "Synchronizing time (pass 1)" 
sync_time

# Mark us as readying, and get our cert.
post_state $HOSTNAME "readying"
final_state="ready"
mkdir -p /etc/chef
curl -o /etc/chef/validation.pem \
    "http://$HTTP_SERVER/validation.pem"

# Make sure that the client knows how to talk to the server.
# "http://chef.example.com:4000" is part of the default config; if it's there,
# we can overwrite it
grep -q '^\s*chef_server_url\s*"http://chef.example.com:4000"' /etc/chef/client.rb 2> /dev/null
if [[ $? -eq 0 || ! -f /etc/chef/chef.rb ]]; then
    test -f /etc/chef/chef.rb && mv /etc/chef/chef.rb /etc/chef/chef.rb.bak
    echo "chef_server_url \"http://$IP:4000\"" >/etc/chef/client.rb

    # add reboot handler to chef-client
    # FIXME: there is a cleaner way of adding handlers:
    # http://wiki.opscode.com/display/chef/Opscode+LWRP+Resources#OpscodeLWRPResources-chefhandler
    
    cat >> /etc/chef/client.rb <<EOF
require "/var/chef/handlers/reboot_handler"
reboot_handler = RebootHandler.new
report_handlers << reboot_handler # these fire at the end of a successful run
EOF

    # create reboot handler
    mkdir -p /var/chef/handlers
    cat > /var/chef/handlers/reboot_handler.rb <<EOF
class RebootHandler < Chef::Handler
  def report
    if node.run_state[:reboot]
      Chef::Log.info("Reboot requested through node.run_state[:reboot]")
      system("/sbin/reboot")
    end
  end  
end    
EOF

fi

if [[ ! -x /etc/init.d/chef-client ]]; then
    # Install Chef
    echo "Installing Chef..."

    while ! log_to zypper zypper -n refresh ; do
	echo "Failed to do zypper refresh, wait and try again"
	sleep 10
    done
    while ! log_to zypper zypper -n install rubygem-chef ; do
	echo "Failed to do zypper install, wait and try again"
	sleep 10
    done

    log_to chef chkconfig -a chef-client
fi


# Run Chef
echo "Syncing time (pass 2)"
sync_time

# Until we arrange for the network to transisiton from using
# DHCP somewhere else, the first run of chef-client will always die due to
# the networking barclamp changing the IP address from dhcp to static.
# We will try to pick up and run with it.
echo "Running Chef Client  (pass 1)"
log_to chef chef-client -l debug

# Make sure our interfaces are as up as we can get them
echo "Ensuring that our network interfaces are up."
log_to ifup /sbin/service network restart

# Only transition to problem state if the second run fails.
echo "Running Chef Client (pass 2)"
if ! log_to chef chef-client -l debug; then
    log_to ifup /sbin/service network restart
    post_state $HOSTNAME "recovering"
    echo "Error Path"
    echo "Syncing Time (pass 3)"
    sync_time
    echo "Removing Chef Cache"
    rm -rf /var/cache/chef/*
    echo "Running Chef Client (pass 3) - cache cleanup"
    if ! log_to chef chef-client -l debug; then 
        log_to ifup /sbin/service network restart
        echo "Error Path"
        echo "Syncing Time (pass 4)"
        sync_time
        echo "Removing Chef Cache"
        rm -rf /var/cache/chef/*
        echo "Checking Keys"
        rm -f /etc/chef/client.pem
        post_state $HOSTNAME "installed"
        echo "Running Chef Client (pass 4) - password cleanup"
        if ! log_to chef chef-client -l debug; then 
            log_to ifup /sbin/service network restart
            echo "chef-client run failed four times, giving up."
            echo "Failed"
            printf "Our IP address is: %s\n" "$(ip addr show)"
            final_state="problem"
        else
            post_state "$HOSTNAME" "$final_state"
            log_to chef chef-client -l debug
        fi
    fi
fi

# Transition to our final state
post_state $HOSTNAME "$final_state"

# make sure to keep hostname
echo $HOSTNAME > /etc/HOSTNAME

log_to time service ntp start
service chef-client start

echo "Done"
